spring.application.name=servicios-pedidos
server.port=8002

#Lista de instancias a las que puedo emitir la peticion
#servicios-productos.ribbon.listOfServers=localhost:8001, localhost:9001

#Debes conectarte al servido eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

#En Hystrix el timeout es de 1 segundo
#lo podemos ampliar a 15 segundos
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=15000

#Conficudar los parametros del CircuitBreaker
#pedidos es el identificador que he utilizado en PedidoServiceImpl para crear CircuitBreaker
#vamos a dar un nombre a la configuracion puede ser cualquiera
resilience4j.circuitbreaker.instances.pedidos.base-config=defecto

#vamos a lanzar 10 peticiones y cuando tengamos el 50% de errorres entraremos en estado abierto
resilience4j.circuitbreaker.configs.defecto.sliding-window-size=10
resilience4j.circuitbreaker.configs.defecto.failure-rate-threshold=50

#en estado abierto permanecemos 20 segundos y pasamos a estado semi-abierto
resilience4j.circuitbreaker.configs.defecto.wait-duration-in-open-state=20s

#Desde el estado semi-abierto lanzamos una muestra de 5 peticiones
#Si de esas 5 peticiones 3 son errorneas volvemos a estado abierto
#Si solo son 2 erroneas o menos (menos del 50%)vamos a estado cerrado
resilience4j.circuitbreaker.configs.defecto.permitted-number-of-calls-in-half-open-state=5

#Configurar las peticiones lentas
#Cuando lanzo 10 peticiones si el 50% son peticiones lentas tardan mas de 2 segundos pasamos a estado abierto
resilience4j.circuitbreaker.configs.defecto.slow-call-duration-threshold=2s
resilience4j.circuitbreaker.configs.defecto.slow-call-rate-threshold=50

#Acemos lo mismo para el Hy
#ampliamos a 6 segundos
resilience4j.timelimiter.instances.pedidos.base-config=defecto
resilience4j.timelimiter.configs.defecto.timeout-duration=6s
